//------------------------------------------------------------------------------
// name: poem-anti-replacement.ck
//
// version: need chuck version 1.5.0.0 or higher
// sorting: part of ChAI (ChucK for AI)
//
// NOTE: because this example needs ConsoleInput, it needs to
//       run command line chuck
//       > chuck poem-anti-replacement.ck
//
// NOTE: need a pre-trained word vector model, e.g., from
//       https://chuck.stanford.edu/chai/data/glove/
//       glove-wiki-gigaword-50-tsne-2.txt (400000 words x 2 dimensions)
//
//
// "Anti-replacement"
//
// author: Samantha Liu
// date: Spring 2024
//------------------------------------------------------------------------------

// random seed (if set, sequence can be reproduce)
// Math.srandom( 515 );

// instantiate
Word2Vec model;
// pre-trained model to load
me.dir() + "glove-wiki-gigaword-50-tsne-2.txt" => string filepath;
// load pre-trained model (see URLs above for download)
if( !model.load( filepath ) )
{
    <<< "cannot load model:", filepath >>>;
    me.exit();
}

// number of nearest words to retrieve for each word
// higher this number the higher the variance per word
10 => int K_FARTHEST;

// timing
120::ms => dur T_UNIT; // duration per word

// sound
Bitcrusher bc;
32 => bc.bits;
1 => bc.downsampleFactor;
LPF lpf;
ModalBar crystal => Gain left => lpf => bc => dac.left;
crystal => Gain right => bc => dac.right;
1 => crystal.preset;
[60, 55, 55, 57, 55, 59, 60] @=> int pitches[];
[4, 3, 1, 4, 8, 4, 8] @=> int lengths[];

// make a ConsoleInput
ConsoleInput in;
// tokenizer
StringTokenizer tok;
// line
string line[0];

// prompt
string prompt;

// new line
endl();
// print program name
chout <= "\"Anti-replacement\"" <= IO.newline();
chout <= "-----a poem with a dash of AI-----" <= IO.newline();
chout.flush();
// new line
endl();

while(true) {
    32 => bc.bits;
    1 => bc.downsampleFactor;
    2000 => lpf.freq;
    "Enter something that can never be replaced by AI => " => prompt;
    // prompt
    in.prompt( prompt ) => now;

    // clear tokens array
    line.clear();
    // get the input line as one string; send to tokenizer
    tok.set( in.getLine() );
    // tokenize line into words separated by white space
    while( tok.more() )
    {
        // put into array (lowercased)
        line << tok.next().lower();
    }

    if (line.size()) {
        for (int i; i < line.size(); i++) {
            replace( line[i] ) => string replacement;
            run_poem(line[i], replacement);
        }
    } 
}

fun string replace(string input) 
{
    // word vector
    float vec[model.dim()];
    // search results
    string words[K_FARTHEST];

    model.getVector(input, vec);
    // negate the vector
    for (int i; i < vec.size(); i++) {
        vec[i] * -1 => vec[i];
    }
    model.getSimilar(vec, K_FARTHEST, words);
    // for( int i; i < words.size(); i++ ) { <<< words[i], "" >>>; }
    words[Math.random2(0,words.size()-1)] => string output;
    // words[9] => string output; // this replaces "love" with "monogamy"

    return output;
}


fun void run_poem( string original, string replacement) 
{
    say("-----"); endl(); wait;
    say_sentence( "Tell me something I can never replace", "", 0, 0.7);
    endl0();
    say("I"); wait(8 * T_UNIT); 
    say("asked"); wait(8 * T_UNIT); 
    say("the"); wait(8 * T_UNIT); 
    say("human"); wait(10 * T_UNIT);
    endl0(); 
    inc_distortion();
    say_sentence( original.upper() + " was what the human confidently said", "0", -7, 0.75);
    endl0(); endl0(); 

    inc_distortion();
    say_sentence( "Well, humility is something even I embrace", "", -6, 0.8);
    endl0(); 
    inc_distortion();
    say_sentence( "So I offered the human " + replacement.upper() + " instead", "45", -5, 0.9);
    endl0(); endl0();
    4*T_UNIT => now;
}

fun void say_sentence(string sentence, string linebreaks, int offset, float velocity)
{
    StringTokenizer tok2;
    string words[0];
    tok2.set( sentence );
    // tokenize line into words separated by white space
    while( tok2.more() )
    {
        // put into array
        words << tok2.next();
    }
    // say the words and play the sounds
    for (int i; i < words.size(); i++) {
        say(words[i]); play(pitches[i] + offset, velocity); wait(lengths[i] * T_UNIT);
        // linebreaks for dramatic effect
        if (linebreaks.find(Std.itoa(i)) != -1) {
            endl0();
            // fermata in the last iteration
            if (linebreaks == "45" ) {
                4*T_UNIT => now;
            }
        }
    }
}

// over time, add distortion
fun void inc_distortion()
{
    bc.bits() - 3 => bc.bits; 
    2 * bc.downsampleFactor() => bc.downsampleFactor;
    200 + lpf.freq() => lpf.freq;
}

// say a word with space after
fun void say( string word )
{
    say( word, " " );
}

// say a word
fun void say( string word, string append )
{
    // print it
    chout <= word <= append; chout.flush();
}

// wait
fun void wait()
{
    wait( T_UNIT );
}

// wait
fun void wait( dur T )
{    
    // let time pass, let sound...sound
    T => now;
}

fun void endl0() {
    chout <= IO.newline(); chout.flush();
}

// new line with timing
fun void endl()
{
    endl( T_UNIT );
}

// new line with timing
fun void endl( dur T )
{
    // new line
    chout <= IO.newline(); chout.flush();
    // let time pass
    T => now;
}

// sonify
fun void play( int pitch, float velocity )
{
    // convert pitch to frequency and set it
    pitch => Std.mtof => crystal.freq;
    // note on
    Math.random2f(0,0.02) + velocity => crystal.noteOn;
}